package com.analisador.sintatico;

import java_cup.runtime.*;
import com.analisador.ast.no.*;
import com.analisador.lexico.Lexer;
import java.io.FileInputStream;
scan with {: return lexer.next_token(); :};


parser code {: 
  public boolean syntaxErrors;

  public boolean getSintaxErros()
  {
  	return this.syntaxErrors;
  }

  Lexer lexer;

  public parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    if ( !(info instanceof Symbol) ) return;
    
    Symbol symbol = (Symbol) info;
    
    System.out.println("Erro de sintaxe: " + symbol.value);
    
    System.out.println(" na linha "+symbol.left+", coluna "+symbol.right);
  }
  
:}; 

terminal PTVIRG, ACHA, FCHA, INT,CHAR, FLOAT, NEW;
terminal APAR, FPAR, VIRG, PSEUDO_ELSE, ACOL, FCOL;
terminal IF, ELSE, WHILE, RETURN, VOID; 
terminal Integer NUMINT, NUMHEXA;
terminal Float NUMFLOAT; 
terminal String STRING;
terminal String ID, IGUAL, DIV, ATRIBUI, SOMA, SUB, UNSUB, MULT, NAO, OU, E, MAIORQ, MENORQ, MENORIG, MAIORIG;

non terminal Programa programa;
non terminal Declaracao declaracao;
non terminal DeclaracaoVariavel dec_variavel;
non terminal ListaDeclaracoes dec_variavellin;
non terminal DeclaracaoFuncao dec_funcao;
non terminal Tipo tipo; 
non terminal ListaNomes lista_nomes;
non terminal TipoBase tipo_base;
non terminal Parametros parametros;
non terminal Parametro parametro;
non terminal ListaParametros parametrolin;
non terminal Bloco bloco; 
non terminal Comando comando;
non terminal ListaComandos comandolin;
non terminal Var var;
non terminal Exop expop;
non terminal Chamada chamada;
non terminal ListaExp lista_exp; 
non terminal ListaExp_VariasExp_Imp lista_explin ;
non terminal Exp exp;

precedence left OU;
precedence left E;
precedence left MENORIG, MAIORIG, MAIORQ, MENORQ, IGUAL;
precedence nonassoc NAO;
precedence left SUB, SOMA;
precedence left MULT, DIV;
precedence nonassoc UNSUB; 
precedence nonassoc PSEUDO_ELSE;
precedence nonassoc ELSE;

programa	   ::= declaracao:d programa:p 
						{: RESULT = new Programa_naoVazio(d,p); :} 
			       |  
			       		{: RESULT = new ProgramaVazio(); :} 
			       ;

declaracao	   ::= dec_funcao:f 
						{: RESULT = new Declaracao_decFuncao(f); :} 
				   | dec_variavel:v  
				   		{: RESULT = new Declacracao_decVariavel(v);:}
				   ;

dec_variavel   ::= tipo:t lista_nomes:l PTVIRG 
						{: RESULT = new DeclaracaoVariavel(t,l);:}
					;

lista_nomes    ::= ID :i
						{: RESULT = new ListaNomesID(i); :} 
				   | lista_nomes:l VIRG ID:i 
				   		{: RESULT = new ListaNomes_VirgID(l, i);:}
				   ;

dec_funcao     ::=  tipo:t ID:i APAR parametros:p FPAR bloco:b 
						{: RESULT = new DeclaracaoFuncao_Tipo(t, p, b, i); :}
					| VOID ID:i APAR parametros:p FPAR bloco:b 
						{: RESULT = new DeclaracaoFuncao_void(p, b, i); :}
					;

tipo		   ::= tipo_base:t 
						{: RESULT = new Tipo_TipoBase(t); :}  
				    | tipo:t ACOL FCOL
				    	{: RESULT = new TipoColchetes(t);  :}
				    ;

tipo_base	   ::= INT 
						{: RESULT = new TipoBaseInt(); :} 
				    |CHAR
				   		{: RESULT = new TipoBaseChar(); :} 
				   	| FLOAT 
				   		{: RESULT = new TipoBaseFloat(); :}
				   	;

parametros     ::= 		{: RESULT = new Parametros_Vazio();:}
					| parametro:p parametrolin:l
						{: RESULT = new Parametros_Imp(p, l);:}
					;

parametrolin   ::= 		{: RESULT = new  ListaParametros_Vazia();:}
					| VIRG parametro:p parametrolin:l 
						{: RESULT = new ListaParametros_Imp(p,l);:}
					;

parametro      ::= tipo:t ID:i 
						{: RESULT = new Parametro_TipoId(t,i);:}
					;

bloco		   ::=  ACHA dec_variavellin:v comandolin:c FCHA
						{: RESULT = new Bloco_Imp(v,c);:}
					| PTVIRG 
						{: RESULT = new BlocoPtvirg();:}
					;
				   
dec_variavellin ::=  	{: RESULT = new ListaDeclaracoes_Vazio();:}
					 |  dec_variavel:d dec_variavellin:v
					 	{: RESULT = new LitaDeclaracoes_NaoVazia(d,v) ;:} 
					 ; 
				   	
comandolin	   ::= 		{: RESULT = new ListaComandos_Vazia(); :}
					| comando:c comandolin:l 
						{: RESULT = new ListaComandos_Imp_NaoVazia(c,l);:}
					;

comando		   ::= RETURN expop:e PTVIRG
						{: RESULT = new ComandoRetorno(e) ;:}
				   	| chamada:c PTVIRG
				   		{: RESULT = new ComandoChamada(c) ;:}
				   	| var:v ATRIBUI exp:e PTVIRG
				   		{: RESULT= new ComandoAtribuicao(v,e);:}
				   	| bloco:b
				   		{: RESULT = new ComandoBloco(b);:}
				    | IF APAR exp:e FPAR comando:c %prec PSEUDO_ELSE
				    	
					| IF APAR exp:e FPAR comando:c1 ELSE comando:c2
						{: RESULT = new ComandoIf_ComElse(e, c1, c2);:}
					| WHILE APAR exp:e FPAR comando:c
						{: RESULT = new  ComandoWhile(e,c);:}
				   	; 


var			   ::= ID:e 
						{: RESULT = new VariavelID(e);:}
				   | var:v ACOL exp:e FCOL
				   		{: RESULT = new VariavelColchetes(v,e);:}
				   		
				   ;				   	

expop		   ::= 		{: RESULT = new  Exop_Vazio(); :}
					| exp:e
						{: RESULT = new Exop_exp(e); :}
					;
	
exp			   ::= NUMINT:numInt 
						{: RESULT = new ExpInt (numInt); :} 
					| NUMFLOAT:f
						{: RESULT = new ExpFloat (f); :}  
					| STRING:s
						{: RESULT = new ExpString (s); :}   
					| NUMHEXA:h
						{: RESULT = new ExpHexa (h); :}  
					| exp:lexp SOMA:op exp:rexp 
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp SUB:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp MULT:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp DIV:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp IGUAL:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp MENORIG:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp MAIORIG:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp MENORQ:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp MAIORQ:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| NAO exp:e
						{: RESULT = new Exp_NotExp(e);:}
					| exp:lexp E:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| exp:lexp OU:op exp:rexp
						{: RESULT = new ExpressaoBinaria(lexp, op, rexp); :}
					| chamada:c
						{: RESULT = new Exp_Chamda(c);:}
					| var:v
						{: RESULT = new Exp_Var(v); :}
					| NEW tipo:t ACOL exp:e FCOL
						{: RESULT = new Exp_New(t,e);:}
					| SUB exp:e %prec UNSUB
						
					| APAR exp:e FPAR
						{: RESULT = new Exp_Parenteses(e);:}
						; 

chamada		   ::= ID:i APAR lista_exp:l FPAR
						{: RESULT = new Chamada_Imp(l,i); :}
					;

lista_exp	   ::= 		{: RESULT = new ListaExp_NoExp();:}
					| exp:e lista_explin:l
						{: RESULT = new ListaExp_VariasExp(e,l);:}
					 ;

lista_explin   ::= 		{: RESULT = new ListaExp_VariasExp_Imp_Vazio();:}
					| VIRG exp:e lista_explin:l
						{: RESULT = new ListaExp_VariasExp_Imp_NotVazio(e,l);:}
					;
	