
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 27 10:44:42 GMT-03:00 2012
//----------------------------------------------------

package com.analisador.sintatico;

import java_cup.runtime.*;
import com.analisador.ast.no.*;
import com.analisador.lexico.Lexer;
import java.io.FileInputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 27 10:44:42 GMT-03:00 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\005" +
    "\000\002\010\003\000\002\010\005\000\002\006\010\000" +
    "\002\006\010\000\002\007\003\000\002\007\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\002\000\002\012\004\000\002\014\002\000\002\014\005" +
    "\000\002\013\004\000\002\015\006\000\002\015\003\000" +
    "\002\005\002\000\002\005\004\000\002\017\002\000\002" +
    "\017\004\000\002\016\005\000\002\016\004\000\002\016" +
    "\006\000\002\016\003\000\002\016\007\000\002\016\011" +
    "\000\002\016\007\000\002\020\003\000\002\020\006\000" +
    "\002\021\002\000\002\021\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\004\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\007\000\002\025\004\000\002\025\005" +
    "\000\002\022\006\000\002\023\002\000\002\023\004\000" +
    "\002\024\002\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\014\002\uffff\007\006\010\015\011\014\025" +
    "\010\001\002\000\006\017\ufff7\032\ufff7\001\002\000\004" +
    "\002\174\001\002\000\006\017\ufff5\032\ufff5\001\002\000" +
    "\014\002\uffff\007\006\010\015\011\014\025\010\001\002" +
    "\000\004\032\166\001\002\000\014\002\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\025\ufffd\001\002\000\006\017\017\032\016" +
    "\001\002\000\014\002\ufffe\007\ufffe\010\ufffe\011\ufffe\025" +
    "\ufffe\001\002\000\006\017\ufff3\032\ufff3\001\002\000\006" +
    "\017\ufff4\032\ufff4\001\002\000\010\004\ufffb\013\025\015" +
    "\ufffb\001\002\000\004\020\024\001\002\000\006\004\021" +
    "\015\022\001\002\000\032\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\021\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\032\ufffc\001\002\000\004\032\023\001\002\000" +
    "\006\004\ufffa\015\ufffa\001\002\000\006\017\ufff6\032\ufff6" +
    "\001\002\000\012\007\006\010\015\011\014\014\ufff2\001" +
    "\002\000\004\014\036\001\002\000\006\017\017\032\035" +
    "\001\002\000\006\014\ufff0\015\032\001\002\000\004\014" +
    "\ufff1\001\002\000\010\007\006\010\015\011\014\001\002" +
    "\000\006\014\ufff0\015\032\001\002\000\004\014\uffef\001" +
    "\002\000\006\014\uffee\015\uffee\001\002\000\006\004\040" +
    "\005\037\001\002\000\026\004\uffeb\005\uffeb\006\uffeb\007" +
    "\006\010\015\011\014\021\uffeb\023\uffeb\024\uffeb\032\uffeb" +
    "\001\002\000\034\002\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\032\uffec\001\002\000\014\002\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\025\ufff9\001\002\000\020\004\040\005\037" +
    "\006\uffe9\021\052\023\047\024\054\032\053\001\002\000" +
    "\006\017\017\032\046\001\002\000\026\004\uffeb\005\uffeb" +
    "\006\uffeb\007\006\010\015\011\014\021\uffeb\023\uffeb\024" +
    "\uffeb\032\uffeb\001\002\000\020\004\uffea\005\uffea\006\uffea" +
    "\021\uffea\023\uffea\024\uffea\032\uffea\001\002\000\006\004" +
    "\ufffb\015\ufffb\001\002\000\004\013\162\001\002\000\022" +
    "\004\uffe4\005\uffe4\006\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\032\uffe4\001\002\000\020\004\040\005\037\006\uffe9" +
    "\021\052\023\047\024\054\032\053\001\002\000\004\013" +
    "\153\001\002\000\046\004\uffe0\013\143\014\uffe0\015\uffe0" +
    "\017\uffe0\020\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\001\002\000\026\004\uffde\012\063\013\064\026" +
    "\070\027\067\030\072\031\066\032\053\037\071\042\074" +
    "\001\002\000\004\004\137\001\002\000\006\017\061\035" +
    "\062\001\002\000\004\006\060\001\002\000\034\002\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\032\uffed\001\002" +
    "\000\024\012\063\013\064\026\070\027\067\030\072\031" +
    "\066\032\053\037\071\042\074\001\002\000\024\012\063" +
    "\013\064\026\070\027\067\030\072\031\066\032\053\037" +
    "\071\042\074\001\002\000\010\007\006\010\015\011\014" +
    "\001\002\000\024\012\063\013\064\026\070\027\067\030" +
    "\072\031\066\032\053\037\071\042\074\001\002\000\032" +
    "\004\126\033\104\034\103\036\107\037\102\041\100\043" +
    "\106\044\110\045\077\046\101\047\105\050\111\001\002" +
    "\000\040\004\uffda\014\uffda\015\uffda\020\uffda\033\uffda\034" +
    "\uffda\036\uffda\037\uffda\041\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\001\002\000\040\004\uffd9\014" +
    "\uffd9\015\uffd9\020\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9" +
    "\041\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\001\002\000\040\004\uffdc\014\uffdc\015\uffdc\020\uffdc" +
    "\033\uffdc\034\uffdc\036\uffdc\037\uffdc\041\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\001\002\000\024" +
    "\012\063\013\064\026\070\027\067\030\072\031\066\032" +
    "\053\037\071\042\074\001\002\000\040\004\uffdb\014\uffdb" +
    "\015\uffdb\020\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb\041" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\001\002\000\040\004\uffcc\014\uffcc\015\uffcc\020\uffcc\033" +
    "\uffcc\034\uffcc\036\uffcc\037\uffcc\041\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000\024\012" +
    "\063\013\064\026\070\027\067\030\072\031\066\032\053" +
    "\037\071\042\074\001\002\000\042\004\uffcb\014\uffcb\015" +
    "\uffcb\017\061\020\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb" +
    "\041\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\001\002\000\040\004\uffcf\014\uffcf\015\uffcf\020\uffcf" +
    "\033\uffcf\034\103\036\107\037\102\041\100\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\024" +
    "\012\063\013\064\026\070\027\067\030\072\031\066\032" +
    "\053\037\071\042\074\001\002\000\024\012\063\013\064" +
    "\026\070\027\067\030\072\031\066\032\053\037\071\042" +
    "\074\001\002\000\024\012\063\013\064\026\070\027\067" +
    "\030\072\031\066\032\053\037\071\042\074\001\002\000" +
    "\024\012\063\013\064\026\070\027\067\030\072\031\066" +
    "\032\053\037\071\042\074\001\002\000\024\012\063\013" +
    "\064\026\070\027\067\030\072\031\066\032\053\037\071" +
    "\042\074\001\002\000\024\012\063\013\064\026\070\027" +
    "\067\030\072\031\066\032\053\037\071\042\074\001\002" +
    "\000\024\012\063\013\064\026\070\027\067\030\072\031" +
    "\066\032\053\037\071\042\074\001\002\000\024\012\063" +
    "\013\064\026\070\027\067\030\072\031\066\032\053\037" +
    "\071\042\074\001\002\000\024\012\063\013\064\026\070" +
    "\027\067\030\072\031\066\032\053\037\071\042\074\001" +
    "\002\000\024\012\063\013\064\026\070\027\067\030\072" +
    "\031\066\032\053\037\071\042\074\001\002\000\024\012" +
    "\063\013\064\026\070\027\067\030\072\031\066\032\053" +
    "\037\071\042\074\001\002\000\040\004\uffd2\014\uffd2\015" +
    "\uffd2\020\uffd2\033\uffd2\034\103\036\107\037\102\041\100" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\001" +
    "\002\000\040\004\uffce\014\uffce\015\uffce\020\uffce\033\104" +
    "\034\103\036\107\037\102\041\100\043\uffce\044\uffce\045" +
    "\077\046\101\047\105\050\111\001\002\000\040\004\uffd8" +
    "\014\uffd8\015\uffd8\020\uffd8\033\uffd8\034\103\036\uffd8\037" +
    "\uffd8\041\100\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\001\002\000\040\004\uffcd\014\uffcd\015\uffcd\020" +
    "\uffcd\033\104\034\103\036\107\037\102\041\100\043\uffcd" +
    "\044\110\045\077\046\101\047\105\050\111\001\002\000" +
    "\040\004\uffd3\014\uffd3\015\uffd3\020\uffd3\033\uffd3\034\103" +
    "\036\107\037\102\041\100\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\001\002\000\040\004\uffd4\014\uffd4" +
    "\015\uffd4\020\uffd4\033\uffd4\034\103\036\107\037\102\041" +
    "\100\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\001\002\000\040\004\uffd5\014\uffd5\015\uffd5\020\uffd5\033" +
    "\uffd5\034\uffd5\036\uffd5\037\uffd5\041\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\001\002\000\040\004" +
    "\uffd7\014\uffd7\015\uffd7\020\uffd7\033\uffd7\034\103\036\uffd7" +
    "\037\uffd7\041\100\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\001\002\000\040\004\uffd1\014\uffd1\015\uffd1" +
    "\020\uffd1\033\uffd1\034\103\036\107\037\102\041\100\043" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\001\002" +
    "\000\040\004\uffd6\014\uffd6\015\uffd6\020\uffd6\033\uffd6\034" +
    "\uffd6\036\uffd6\037\uffd6\041\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\001\002\000\040\004\uffd0\014" +
    "\uffd0\015\uffd0\020\uffd0\033\uffd0\034\103\036\107\037\102" +
    "\041\100\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\001\002\000\040\004\uffc9\014\uffc9\015\uffc9\020\uffc9" +
    "\033\uffc9\034\uffc9\036\uffc9\037\uffc9\041\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\022" +
    "\004\uffe5\005\uffe5\006\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\032\uffe5\001\002\000\032\014\130\033\104\034\103" +
    "\036\107\037\102\041\100\043\106\044\110\045\077\046" +
    "\101\047\105\050\111\001\002\000\040\004\uffc8\014\uffc8" +
    "\015\uffc8\020\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\041" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\001\002\000\004\017\132\001\002\000\026\012\063\013" +
    "\064\020\024\026\070\027\067\030\072\031\066\032\053" +
    "\037\071\042\074\001\002\000\032\020\134\033\104\034" +
    "\103\036\107\037\102\041\100\043\106\044\110\045\077" +
    "\046\101\047\105\050\111\001\002\000\040\004\uffca\014" +
    "\uffca\015\uffca\020\uffca\033\uffca\034\uffca\036\uffca\037\uffca" +
    "\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\001\002\000\032\020\136\033\104\034\103\036\107" +
    "\037\102\041\100\043\106\044\110\045\077\046\101\047" +
    "\105\050\111\001\002\000\044\004\uffdf\014\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\001\002\000\022\004\uffe6\005\uffe6\006\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\032\uffe6\001\002\000\032" +
    "\004\uffdd\033\104\034\103\036\107\037\102\041\100\043" +
    "\106\044\110\045\077\046\101\047\105\050\111\001\002" +
    "\000\004\004\142\001\002\000\022\004\uffe7\005\uffe7\006" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\032\uffe7\001\002" +
    "\000\026\012\063\013\064\014\uffc6\026\070\027\067\030" +
    "\072\031\066\032\053\037\071\042\074\001\002\000\034" +
    "\014\uffc4\015\150\033\104\034\103\036\107\037\102\041" +
    "\100\043\106\044\110\045\077\046\101\047\105\050\111" +
    "\001\002\000\004\014\146\001\002\000\040\004\uffc7\014" +
    "\uffc7\015\uffc7\020\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7" +
    "\041\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\001\002\000\004\014\uffc5\001\002\000\024\012\063" +
    "\013\064\026\070\027\067\030\072\031\066\032\053\037" +
    "\071\042\074\001\002\000\034\014\uffc4\015\150\033\104" +
    "\034\103\036\107\037\102\041\100\043\106\044\110\045" +
    "\077\046\101\047\105\050\111\001\002\000\004\014\uffc3" +
    "\001\002\000\024\012\063\013\064\026\070\027\067\030" +
    "\072\031\066\032\053\037\071\042\074\001\002\000\032" +
    "\014\155\033\104\034\103\036\107\037\102\041\100\043" +
    "\106\044\110\045\077\046\101\047\105\050\111\001\002" +
    "\000\016\004\040\005\037\021\052\023\047\024\054\032" +
    "\053\001\002\000\022\004\uffe3\005\uffe3\006\uffe3\021\uffe3" +
    "\022\157\023\uffe3\024\uffe3\032\uffe3\001\002\000\016\004" +
    "\040\005\037\021\052\023\047\024\054\032\053\001\002" +
    "\000\022\004\uffe2\005\uffe2\006\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\032\uffe2\001\002\000\004\006\uffe8\001\002" +
    "\000\024\012\063\013\064\026\070\027\067\030\072\031" +
    "\066\032\053\037\071\042\074\001\002\000\032\014\164" +
    "\033\104\034\103\036\107\037\102\041\100\043\106\044" +
    "\110\045\077\046\101\047\105\050\111\001\002\000\016" +
    "\004\040\005\037\021\052\023\047\024\054\032\053\001" +
    "\002\000\022\004\uffe1\005\uffe1\006\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\032\uffe1\001\002\000\004\013\167\001" +
    "\002\000\012\007\006\010\015\011\014\014\ufff2\001\002" +
    "\000\004\014\171\001\002\000\006\004\040\005\037\001" +
    "\002\000\014\002\ufff8\007\ufff8\010\ufff8\011\ufff8\025\ufff8" +
    "\001\002\000\004\002\001\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\016\002\004\003\006\004\010\006\012\007" +
    "\011\011\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\172\003\006\004\010\006" +
    "\012\007\011\011\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\026" +
    "\011\003\012\025\013\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\030\001\001\000\002\001\001" +
    "\000\010\007\026\011\003\013\032\001\001\000\004\014" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\040\001\001\000\012\004\043\005\041\007\042\011" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\047\016\050\017\056\020\055\022\054\001\001\000" +
    "\004\010\017\001\001\000\012\004\043\005\044\007\042" +
    "\011\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\047\016\050" +
    "\017\160\020\055\022\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\074\021\140\022\072\025\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\074\022\072\025\134" +
    "\001\001\000\010\020\074\022\072\025\064\001\001\000" +
    "\006\007\130\011\003\001\001\000\010\020\074\022\072" +
    "\025\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\074\022\072" +
    "\025\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\074\022\072\025\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\074\022\072\025\123\001" +
    "\001\000\010\020\074\022\072\025\122\001\001\000\010" +
    "\020\074\022\072\025\121\001\001\000\010\020\074\022" +
    "\072\025\120\001\001\000\010\020\074\022\072\025\117" +
    "\001\001\000\010\020\074\022\072\025\116\001\001\000" +
    "\010\020\074\022\072\025\115\001\001\000\010\020\074" +
    "\022\072\025\114\001\001\000\010\020\074\022\072\025" +
    "\113\001\001\000\010\020\074\022\072\025\112\001\001" +
    "\000\010\020\074\022\072\025\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\074" +
    "\022\072\025\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\074\022\072\023\144\025\143\001\001\000\004" +
    "\024\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\074\022\072\025\150\001\001" +
    "\000\004\024\151\001\001\000\002\001\001\000\010\020" +
    "\074\022\072\025\153\001\001\000\002\001\001\000\012" +
    "\015\047\016\155\020\055\022\054\001\001\000\002\001" +
    "\001\000\012\015\047\016\157\020\055\022\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\074\022" +
    "\072\025\162\001\001\000\002\001\001\000\012\015\047" +
    "\016\164\020\055\022\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\026\011\003\012\167\013\027" +
    "\001\001\000\002\001\001\000\004\015\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;

  public boolean getSintaxErros()
  {
  	return this.syntaxErrors;
  }

  Lexer lexer;

  public parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    if ( !(info instanceof Symbol) ) return;
    
    Symbol symbol = (Symbol) info;
    
    System.out.println("Erro de sintaxe: " + symbol.value);
    
    System.out.println(" na linha "+symbol.left+", coluna "+symbol.right);
  }
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_explin ::= VIRG exp lista_explin 
            {
              ListaExp_VariasExp_Imp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaExp_VariasExp_Imp l = (ListaExp_VariasExp_Imp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaExp_VariasExp_Imp_NotVazio(e,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_explin",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_explin ::= 
            {
              ListaExp_VariasExp_Imp RESULT =null;
		 RESULT = new ListaExp_VariasExp_Imp_Vazio();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_explin",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_exp ::= exp lista_explin 
            {
              ListaExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaExp_VariasExp_Imp l = (ListaExp_VariasExp_Imp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaExp_VariasExp(e,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_exp ::= 
            {
              ListaExp RESULT =null;
		 RESULT = new ListaExp_NoExp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // chamada ::= ID APAR lista_exp FPAR 
            {
              Chamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaExp l = (ListaExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Chamada_Imp(l,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamada",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= APAR exp FPAR 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exp_Parenteses(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= SUB exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= NEW tipo ACOL exp FCOL 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exp_New(t,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= var 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp_Var(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= chamada 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Chamada c = (Chamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp_Chamda(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp OU exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp E exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NAO exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp_NotExp(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp MAIORQ exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp MENORQ exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp MAIORIG exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MENORIG exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp IGUAL exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp DIV exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MULT exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp SUB exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp SOMA exp 
            {
              Exp RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp lexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rexp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria(lexp, op, rexp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= NUMHEXA 
            {
              Exp RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpHexa (h); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpString (s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= NUMFLOAT 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpFloat (f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= NUMINT 
            {
              Exp RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numInt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpInt (numInt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expop ::= exp 
            {
              Exop RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exop_exp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expop",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expop ::= 
            {
              Exop RESULT =null;
		 RESULT = new  Exop_Vazio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expop",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var ::= var ACOL exp FCOL 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VariavelColchetes(v,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var ::= ID 
            {
              Var RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariavelID();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comando ::= WHILE APAR exp FPAR comando 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ComandoWhile(e,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comando ::= IF APAR exp FPAR comando ELSE comando 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Comando c1 = (Comando)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comando c2 = (Comando)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoIf_ComElse(e, c1, c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= IF APAR exp FPAR comando 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= bloco 
            {
              Comando RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoBloco(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= var ATRIBUI exp PTVIRG 
            {
              Comando RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new ComandoAtribuicao(v,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= chamada PTVIRG 
            {
              Comando RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Chamada c = (Chamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ComandoChamada(c) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= RETURN expop PTVIRG 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exop e = (Exop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ComandoRetorno(e) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comandolin ::= comando comandolin 
            {
              ListaComandos RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaComandos l = (ListaComandos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaComandos_Imp_NaoVazia(c,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandolin",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comandolin ::= 
            {
              ListaComandos RESULT =null;
		 RESULT = new ListaComandos_Vazia(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandolin",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_variavellin ::= dec_variavel dec_variavellin 
            {
              ListaDeclaracoes RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracaoVariavel d = (DeclaracaoVariavel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaDeclaracoes v = (ListaDeclaracoes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LitaDeclaracoes_NaoVazia(d,v) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variavellin",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_variavellin ::= 
            {
              ListaDeclaracoes RESULT =null;
		 RESULT = new ListaDeclaracoes_Vazio();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variavellin",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloco ::= PTVIRG 
            {
              Bloco RESULT =null;
		 RESULT = new BlocoPtvirg();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloco ::= ACHA dec_variavellin comandolin FCHA 
            {
              Bloco RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaDeclaracoes v = (ListaDeclaracoes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaComandos c = (ListaComandos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Bloco_Imp(v,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro ::= tipo ID 
            {
              Parametro RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametro_TipoId(t,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametrolin ::= VIRG parametro parametrolin 
            {
              ListaParametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaParametros l = (ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaParametros_Imp(p,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrolin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametrolin ::= 
            {
              ListaParametros RESULT =null;
		 RESULT = new  ListaParametros_Vazia();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrolin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros ::= parametro parametrolin 
            {
              Parametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaParametros l = (ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametros_Imp(p, l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= 
            {
              Parametros RESULT =null;
		 RESULT = new Parametros_Vazio();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_base ::= FLOAT 
            {
              TipoBase RESULT =null;
		 RESULT = new TipoBaseFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_base ::= CHAR 
            {
              TipoBase RESULT =null;
		 RESULT = new TipoBaseChar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_base ::= INT 
            {
              TipoBase RESULT =null;
		 RESULT = new TipoBaseInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= tipo ACOL FCOL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new TipoColchetes(t);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= tipo_base 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TipoBase t = (TipoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo_TipoBase(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_funcao ::= VOID ID APAR parametros FPAR bloco 
            {
              DeclaracaoFuncao RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracaoFuncao_void(p, b, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_funcao ::= tipo ID APAR parametros FPAR bloco 
            {
              DeclaracaoFuncao RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracaoFuncao_Tipo(t, p, b, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_funcao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_nomes ::= lista_nomes VIRG ID 
            {
              ListaNomes RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaNomes l = (ListaNomes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaNomes_VirgID(l, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_nomes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_nomes ::= ID 
            {
              ListaNomes RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaNomesID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_nomes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_variavel ::= tipo lista_nomes PTVIRG 
            {
              DeclaracaoVariavel RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaNomes l = (ListaNomes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracaoVariavel(t,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_variavel",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracao ::= dec_variavel 
            {
              Declaracao RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracaoVariavel v = (DeclaracaoVariavel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declacracao_decVariavel(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracao ::= dec_funcao 
            {
              Declaracao RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracaoFuncao f = (DeclaracaoFuncao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracao_decFuncao(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= 
            {
              Programa RESULT =null;
		 RESULT = new ProgramaVazio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= declaracao programa 
            {
              Programa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracao d = (Declaracao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Programa_naoVazio(d,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

